
prj_path := $(shell git rev-parse --show-toplevel)
num_cores := $(shell nproc)
num_cores_half := $(shell echo "$$(($(num_cores) / 2))")
VLT_CXX := /usr/bin/clang++
VLT_CC  := /usr/bin/clang


INSTALL_PREFIX          ?= install
INSTALL_DIR             ?= $(prj_path)/${INSTALL_PREFIX}
GCC_INSTALL_DIR         ?= ${INSTALL_DIR}/riscv-gcc
LLVM_INSTALL_DIR        ?= ${INSTALL_DIR}/riscv-llvm
ISA_SIM_INSTALL_DIR     ?= ${INSTALL_DIR}/riscv-isa-sim
ISA_SIM_MOD_INSTALL_DIR ?= ${INSTALL_DIR}/riscv-isa-sim-mod
OPENOCD_INSTALL_DIR     ?= ${INSTALL_DIR}/openocd
VERIL_SRC_ROOT          ?= $(prj_path)/vendor
VERIL_INSTALL_DIR       ?= ${INSTALL_DIR}/verilator
VERIL_VERSION           ?= v5.038
BENDER_DOWNLOAD_LINK    ?= https://github.com/pulp-platform/bender/releases/download/v0.28.0/bender-0.28.0-x86_64-linux-gnu-ubuntu22.04.tar.gz
BENDER_ARCH_FILE        ?= $(shell basename $(BENDER_DOWNLOAD_LINK))

all: dev-dep verilator riscv32-gcc riscv32-llvm  openocd
# Verilator
verilator: ${VERIL_INSTALL_DIR}/bin/verilator

${VERIL_INSTALL_DIR}/bin/verilator:
	rm -fr $(VERIL_SRC_ROOT)/verilator
	cd $(VERIL_SRC_ROOT) && git clone https://github.com/verilator/verilator.git
	# Checkout the right version
	cd $(VERIL_SRC_ROOT)/verilator  && git reset --hard && git fetch && git checkout ${VERIL_VERSION}
	# Compile verilator
	cd $(VERIL_SRC_ROOT)/verilator  && git clean -xfdf && autoconf && \
	./configure --prefix=$(VERIL_INSTALL_DIR) CXX=$(VLT_CXX) CC=$(VLT_CC) && make -j$(num_cores_half)  && make install
	touch ${VERIL_INSTALL_DIR}/bin/verilator



.PHONY: cores

cores:
	@num_cores=$$(nproc); \
	num_cores=$$((num_cores / 2)); \
	echo "Number of cores available on this machine (divided by 2): $$num_cores"

riscv32-gcc: $(GCC_INSTALL_DIR)

$(GCC_INSTALL_DIR): vendor/riscv32-elf-gcc.url
	rm -fr $(GCC_INSTALL_DIR)
	mkdir -p $(INSTALL_DIR)
	cd vendor && \
	wget  `cat $(CURDIR)/$<` -O riscv.tar.gz && \
	tar -xzvf riscv.tar.gz -C  $(INSTALL_DIR)/ riscv	
	mv $(INSTALL_DIR)/riscv $(GCC_INSTALL_DIR)
	touch  $(GCC_INSTALL_DIR)


riscv32-llvm: $(LLVM_INSTALL_DIR)

vendor/riscv32-elf-llvm.tar.gz: vendor/riscv32-elf-llvm.url
	cd vendor && \
	wget `cat $(CURDIR)/$<` -O riscv32-elf-llvm.tar.gz && \
	touch riscv32-elf-llvm.tar.gz

$(LLVM_INSTALL_DIR): vendor/riscv32-elf-llvm.tar.gz
	rm -fr $(LLVM_INSTALL_DIR)
	mkdir -p $(INSTALL_DIR)
	cd vendor && \
	tar -xzvf riscv32-elf-llvm.tar.gz -C  $(INSTALL_DIR)/ riscv-llvm
	touch  $(LLVM_INSTALL_DIR)



dev-dep:
	sudo apt-get install flex bison clang help2man
	sudo apt-get install libelf-dev autoconf
	sudo apt-get install srecord gtkwave

$(HOME)/eth/$(BENDER_ARCH_FILE):
	mkdir -p $(HOME)/eth && cd $(HOME)/eth       &&  \
	wget $(BENDER_DOWNLOAD_LINK)                 

bender: $(HOME)/eth/$(BENDER_ARCH_FILE)
	cd $(HOME)/eth                               &&  \
	tar xzf $(BENDER_ARCH_FILE)                  &&  \
	mkdir -p bin && mv bender bin/ 				 &&  \
	mkdir -p doc && cd doc						     &&  \
	wget https://github.com/pulp-platform/bender/blob/master/README.md

vendor/xpack-openocd.tar.gz: vendor/xpack-openocd.url
	cd vendor && \
	wget `cat $(CURDIR)/$<` -O xpack-openocd.tar.gz 
	touch $@

.PHONY: openocd
openocd: vendor/xpack-openocd.tar.gz
	mkdir -p $(OPENOCD_INSTALL_DIR)
	cd vendor && \
	tar -xzvf xpack-openocd.tar.gz  --strip-components=1 -C $(OPENOCD_INSTALL_DIR)/ 
	touch  $(OPENOCD_INSTALL_DIR)
