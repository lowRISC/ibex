###############################################################################
#
# Copyleft  2024 ISOLDE
########

num_cores := $(shell nproc)
num_cores_half := $(shell echo "$$(($(num_cores) / 2))")


TEST         ?= hello-world

# Common output directories
RUN_INDEX                ?= 0
SIM_RESULTS              ?= simulation_results
SIM_TEST_RESULTS         = $(SIM_RESULTS)/$(TEST)
SIM_RUN_RESULTS          = $(SIM_TEST_RESULTS)/$(RUN_INDEX)
SIM_TEST_PROGRAM_RESULTS = $(SIM_RUN_RESULTS)/test_program


# Compile compile flags for all simulators
SV_CMP_FLAGS =

#top module
VLT_TOP_MODULE     ?= tb_top_verilator

# verilator configuration
VERILATOR           = verilator
VERILATOR_ROOT ?= $(dir $(shell which $(VLT)))/../share/verilator
VLT_ROOT	   ?= ${VERILATOR_ROOT}

VERI_FLAGS         +=
VERI_COMPILE_FLAGS += -Wno-BLKANDNBLK $(SV_CMP_FLAGS) # hope this doesn't hurt us in the long run
VERI_TRACE         ?=
VERI_OBJ_DIR       ?= $(VLT_TOP_MODULE)_$(RUN_INDEX)_cobj_dir
VERI_CFLAGS        += -O2

###############################################################################
# Verilator

# We first test if the user wants to to vcd dumping. This hacky part is required
# because we need to conditionally compile the testbench (-DVCD_TRACE) and pass
# the --trace flags to the verilator call
#ifeq ($(findstring +vcd,$(VERI_FLAGS)),+vcd)

VLT_FLAGS    += -Wno-fatal
VLT_FLAGS    += $(VLT_TOP_MODULE_PARAMS)
VLT_CFLAGS   += -DTOPLEVEL_NAME=$(VLT_TOP_MODULE)
VLT_CFLAGS   += -std=c++17 

ifneq (${WAVES}, 0)
VERI_TRACE="--trace"
VLT_CFLAGS  += -DVCD_TRACE
endif

VLT_FLAGS    += --timing
VLT_FLAGS    += -O3
VLT_CFLAGS   +=  -O3  -I $(VLT_ROOT)/include -I $(VLT_ROOT)/include/vltstd  
#VLT_CFLAGS   +=  -O3 -fno-var-tracking-assignments -I $(VLT_ROOT)/include -I $(VLT_ROOT)/include/vltstd  

.PHONY: build_simulation

verilate: $(VERI_OBJ_DIR)/V$(VLT_TOP_MODULE).mk build_simulation
	mkdir -p $(SIM_RESULTS)
	mv $(VERI_OBJ_DIR)/V$(VLT_TOP_MODULE) $(SIM_RESULTS)/verilator_executable

build_simulation:
#	@echo $(MAKE) -C $(VERI_OBJ_DIR) -j$(num_cores_half) -f V$(VLT_TOP_MODULE).mk
	$(MAKE) -C $(VERI_OBJ_DIR) -j$(num_cores_half) -f V$(VLT_TOP_MODULE).mk

$(VERI_OBJ_DIR)/V$(VLT_TOP_MODULE).mk:  $(TBSRC_VERI) 
	@echo "$(BANNER)"
	@echo "* Compiling  with Verilator"
	@echo "$(BANNER)"
	$(VERILATOR) --cc --sv --exe \
		$(VERI_TRACE) \
		$(VLT_FLAGS)   \
		--Wno-lint --Wno-UNOPTFLAT \
		--timescale-override 1ns/1ps \
		--Wno-MODDUP  \
		 $(TBSRC_VERI) \
		-f $(CV_CORE_MANIFEST) \
		-f $(PE_MANIFEST) \
		--Mdir $(VERI_OBJ_DIR) \
		-CFLAGS "$(VLT_CFLAGS)"  \
		-LDFLAGS "-pthread -lutil -lelf" \
		$(VERI_COMPILE_FLAGS)


# verilator specific cleanup
veri-clean: 
	if [ -d $(SIM_RESULTS)   ]; then rm -r $(SIM_RESULTS);  fi
	if [ -d $(VERI_OBJ_DIR)  ]; then rm -r $(VERI_OBJ_DIR); fi
#	if [ -e memory_dump.bin  ]; then rm memory_dump.bin;    fi
#	if [ -e verilator_tb.vcd ]; then rm verilator_tb.vcd;   fi


###############################################################################

